# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/116JOozfd7roDJdlBuk7AkMrjPtT7Kaqh
"""

from collections import deque

def find_shortest_path(matrix):
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    start = (1, 1)
    end = (4, 4)
    queue = deque([start])
    visited = set()
    visited.add(start)
    parent = {start: None}
    while queue:
        current = queue.popleft()
        if current == end:
            break
        for direction in directions:
            neighbor = (current[0] + direction[0], current[1] + direction[1])
            if (0 <= neighbor[0] < len(matrix) and
                0 <= neighbor[1] < len(matrix[0]) and
                matrix[neighbor[0]][neighbor[1]] == 0 and
                neighbor not in visited):

                visited.add(neighbor)
                queue.append(neighbor)
                parent[neighbor] = current
    if current == end:
        path = []
        while current is not None:
            path.append(current)
            current = parent[current]
        return path[::-1]
    return None
matrix = [
    [0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0]
]
shortest_path = find_shortest_path(matrix)
print("Shortest Path:", shortest_path)