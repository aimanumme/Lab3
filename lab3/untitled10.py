# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iNQMUfH5we_vxJ-xMXgwYibO73JogJ3a
"""

from collections import deque

class Graph:
    def __init__(self, adjacency_list):
        """Initializes the graph with an adjacency list."""
        self.adjacency_list = adjacency_list

    def get_neighbors(self, v):
        """Returns the neighbors of a given node."""
        return self.adjacency_list.get(v, [])  # Return empty list if node has no neighbors

    def h(self, n):
        """Heuristic function: estimates the cost from node n to the goal."""
        H = {
            'The': 4,
            'cat': 3,
            'dog': 3,
            'runs': 2,
            'fast': 1
        }
        return H.get(n, 0)  # Return 0 if node not in heuristic (handles potential errors)

    def a_star_algorithm(self, start_node, stop_node):
        """Implements the A* search algorithm to find the optimal path."""
        open_list = set([start_node])
        closed_list = set([])

        g = {}  # Cost from start node to all other nodes
        g[start_node] = 0

        parents = {}  # Keeps track of paths
        parents[start_node] = start_node

        while len(open_list) > 0:
            n = None  # Current node

            # Find the node with the lowest f(n) = g(n) + h(n)
            for v in open_list:
                if n is None or g[v] + self.h(v) < g[n] + self.h(n):
                    n = v

            if n is None:
                print("Path does not exist!")
                return None

            # If goal node is found, reconstruct and return the path
            if n == stop_node:
                reconst_path = []

                while parents[n] != n:
                    reconst_path.append(n)
                    n = parents[n]

                reconst_path.append(start_node)

                reconst_path.reverse()

                print("Path found: {}".format(reconst_path))
                total_cost = 0
                for i in range(len(reconst_path) - 1):
                    u = reconst_path[i]
                    v = reconst_path[i + 1]
                    neighbors = self.get_neighbors(u)
                    for neighbor, cost in neighbors:
                        if neighbor == v:
                            total_cost += cost
                            break
                print("Total cost: {}".format(total_cost))
                return reconst_path

            # Explore all neighbors of the current node
            for (m, weight) in self.get_neighbors(n):  # Get neighbors and their edge weights
                # If the current node isn't in both open_list and closed_list
                # only add it to open_list when conditions are satisfied
                if m not in open_list and m not in closed_list:
                    open_list.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight

                # Otherwise, check if it's quicker to first visit n, then m
                # and if it is, update parent of m to n
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n

                        if m in closed_list:
                            closed_list.remove(m)
                            open_list.add(m)

            # Remove n from the open_list, and add it to closed_list
            # because all of his neighbors were inspected
            open_list.remove(n)
            closed_list.add(n)

        print("Path does not exist!")
        return None


# Define the graph given in adjacency list
adjacency_list = {
    'The': [('cat', 2), ('dog', 3)],
    'cat': [('runs', 2)],
    'dog': [('runs', 3)],
    'runs': [('fast', 1)],
    'fast': []
}

graph1 = Graph(adjacency_list)
path = graph1.a_star_algorithm('The', 'fast')  # Define start and goal words

if path:
    sentence = " ".join(path)
    print("Sentence:", sentence)